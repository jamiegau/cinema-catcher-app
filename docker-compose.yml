#
# This file is a template example of a docker-compose.yml file used to install catcher app onto a server
# please see the README.md file for more information.
#
# James Gardiner
#
version: '3'

services:

  pgdatabase:
    image: postgres:13.1
    restart: always
    ports:
      - "5435:5432"
    env_file:
      - database.env # configure postgres
    volumes:
      - /opt/catcher/postgresql/data:/var/lib/postgresql/data/
    networks:
      - backend_network

  redis:
    image: redislabs/redistimeseries:latest
    hostname: redis
    restart: always
    command: ["/usr/local/bin/redis-server", "--loadmodule", "/usr/lib/redis/modules/redistimeseries.so", "--dir", "/opt/catcher/redis/.", "--dbfilename", "redis_dump.rdb", "--save", "300", "100"]
    expose:
      - "6379"
    networks:
      - backend_network
    volumes:
      - /opt/catcher/redis:/opt/catcher/redis
    depends_on:
      - pgdatabase

  backend:
    image: jamiegau/catcher_backend:3.0
    restart: always
    # Set the HOSTNAME the catcher instance will be know as in the conteiner.
    # for example, catcher-CINEMA-LOCATION such as catcher-chain-state or catcher-clubmovie-forbes
    hostname: ${CATCHER_HOSTNAME}
    security_opt:
      - seccomp:unconfined
    privileged: true
    depends_on:
      - redis
      - aria2server
      - pgdatabase
    expose:
      - "8000"
    ports:
      - "8000:8000"
    networks:
      - backend_network
        #    env_file:
        #      - ./env
    working_dir: /data/backend
    command: /usr/bin/gunicorn dcinenet_catcher.wsgi:application --bind=0.0.0.0:8000 --timeout 60 --workers 4
    volumes:
      - /etc/machine-id:/etc/machine-id
      - /opt/catcher/storage:/opt/catcher/storage
      - /opt/dcinenet/storage:/opt/dcinenet/storage
    # IMPORTANT, set the name of your timezone here.
    environment:
      - 'TIMEZONE_NAME=${LOCAL_TIMEZONE_NAME}'
      - 'IN_PRODUCTION=True'

  backendc:
    image: jamiegau/catcher_backend:3.0
    restart: always
    # Set the HOSTNAME the catcher instance will be know as in the conteiner.
    # for example, catcher-CINEMA-LOCATION such as catcher-chain-state or catcher-clubmovie-forbes
    security_opt:
      - seccomp:unconfined
    privileged: true
    depends_on:
      - redis
      - aria2server
      - pgdatabase
    expose:
      - "8001"
    ports:
      - "8001:8001"
    networks:
      - backend_network
        #    env_file:
        #      - ./env
    working_dir: /data/backend
    command: /usr/bin/daphne dcinenet_catcher.asgi:application -b 0.0.0.0 -p 8001
    volumes:
      - /etc/machine-id:/etc/machine-id
      - /opt/catcher/storage:/opt/catcher/storage
      - /opt/dcinenet/storage:/opt/dcinenet/storage
    # IMPORTANT, set the name of your timezone here.
    environment:
      - 'TIMEZONE_NAME=${LOCAL_TIMEZONE_NAME}'
      - 'IN_PRODUCTION=True'

  # Celery worker
  worker:
    image: jamiegau/catcher_backend:3.0
    restart: always
    hostname: worker
    privileged: true
    working_dir: /data/backend
    command: celery -A dcinenet_catcher worker --loglevel=info --concurrency=4 --queues=default
    networks:
      - backend_network
    depends_on:
      - redis
      - pgdatabase
    volumes:
      - /etc/machine-id:/etc/machine-id
      - /opt/catcher/storage:/opt/catcher/storage
      - /opt/dcinenet/storage:/opt/dcinenet/storage
    # IMPORTANT, set the name of your timezone here.
    environment:
      - 'TIMEZONE_NAME=${LOCAL_TIMEZONE_NAME}'
      - 'IN_PRODUCTION=True'

  worker_mon:
    image: jamiegau/catcher_backend:3.0
    restart: always
    hostname: worker_mon
    privileged: true
    working_dir: /data/backend
    command: celery -A dcinenet_catcher worker --loglevel=WARNING --concurrency=4 --queues=status_monitor
    networks:
      - backend_network
    depends_on:
      - pgdatabase
      - redis
    volumes:
      - /etc/machine-id:/etc/machine-id
      - /opt/catcher/storage:/opt/catcher/storage
      - /opt/dcinenet/storage:/opt/dcinenet/storage
    # IMPORTANT, set the name of your timezone here.
    environment:
      - 'TIMEZONE_NAME=${LOCAL_TIMEZONE_NAME}'
      - 'IN_PRODUCTION=True'

  # Celery Beat
  beat:
    image: jamiegau/catcher_backend:3.0
    restart: always
    hostname: beat
    working_dir: /data/backend
    command: celery -A dcinenet_catcher beat --loglevel=info
    networks:
      - backend_network
    depends_on:
      - pgdatabase
      - redis
    # IMPORTANT, set the name of your timezone here.
    environment:
      - 'TIMEZONE_NAME=${LOCAL_TIMEZONE_NAME}'
      - 'IN_PRODUCTION=True'

  nginx:
    image: jamiegau/catcher_nginx:3.0
    hostname: nginx
    restart: always
    ports:
      - "80:80"
        #      - "443:443"
    networks:
      - backend_network
    # this must be set to the exposed IP adress on the projection network.
    extra_hosts:
      - "host.docker.internal:${EXPOSED_IP_PROJECTION_NETWORK}"


  ftpserver:
    image: jamiegau/catcher_ftpserver:3.0
    restart: always
    ports:
      - 0.0.0.0:20:20
      - 0.0.0.0:21:21
      - 21100-21120:21100-21120
    networks:
      - backend_network
    volumes:
      - /opt/catcher/storage:/opt/catcher/storage
      - /opt/catcher/ftpserver:/opt/catcher/ftpserver
    # this must be set to the exposed IP adress on the projection network.
    extra_hosts:
      - "host.docker.internal:${EXPOSED_IP_PROJECTION_NETWORK}"
    depends_on:
      - redis

  aria2server:
    image: jamiegau/catcher_aria2server:3.0
    hostname: aria2server
    restart: always
    ports:
      - "16888:16888"
    networks:
      - backend_network
    volumes:
      - /opt/catcher/storage:/opt/catcher/storage
      - /opt/catcher/aria2server:/opt/catcher/aria2server
    depends_on:
      - redis
    extra_hosts:
      - "host.docker.internal:${EXPOSED_IP_PROJECTION_NETWORK}"

  tp:
    image: jamiegau/catcher_backend:3.0
    hostname: tp
    restart: always
    working_dir: /data/backend
    command: python3 manage.py start_proxy
    networks:
      - backend_network
    depends_on:
      - redis
      
  samba:
    image: dperson/samba
    hostname: samba
    restart: always
    ports:
      - "137:137/udp"
      - "138:138/udp"
      - "139:139/tcp"
      - "445:445/tcp"
    environment:
      - SHARE=DCPs;/opt/catcher/storage/assetlib/by_type
    volumes:
      - /opt/catcher/storage:/opt/catcher/storage

networks:
    backend_network:
    
